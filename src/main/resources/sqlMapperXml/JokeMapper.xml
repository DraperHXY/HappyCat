<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.eqshen.mapper.JokeMapper" >
  <resultMap id="BaseResultMap" type="com.eqshen.model.Joke" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="createdate" property="createdate" jdbcType="TIMESTAMP" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="good" property="good" jdbcType="BIGINT" />
    <result column="bad" property="bad" jdbcType="BIGINT" />
  </resultMap>
  
  <resultMap id="UserJokeMap" type="com.eqshen.bean.UserJoke"  extends="BaseResultMap">
      <result column="loginname" property="username" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="ResultMapWithBLOBs" type="com.eqshen.model.Joke" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, title, status, type, createdate, user_id, good, bad
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from joke
    where id = #{id,jdbcType=BIGINT}
  </select>
  
  <select id="selectUserJoke" resultMap="UserJokeMap"  >
    SELECT 
    j.*,user.`loginname` from joke j 
    inner JOIN
	`user` on `user`.id=j.user_id
  </select>
  
  <select id="selectHotUserJoke" resultMap="UserJokeMap"  >
    SELECT 
    j.*,user.`loginname` from joke j 
    inner JOIN
	`user` on `user`.id=j.user_id
	order by j.good-j.bad desc
  </select>
  
  <select id="selectLatestUserJoke" resultMap="UserJokeMap"  >
    SELECT 
    j.*,user.`loginname` from joke j 
    inner JOIN
	`user` on `user`.id=j.user_id
	order by j.createdate DESC
  </select>
  
  <select id="selectRandomUserJoke" resultMap="UserJokeMap"  >
    SELECT t1.*,`user`.loginname
	FROM `joke` AS t1 JOIN 
	(SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `joke`)-(SELECT MIN(id) FROM `joke`))+(SELECT MIN(id) 
	FROM `joke`)) AS id) AS t2
	inner JOIN `user`
	on t1.id >= t2.id
	and `user`.id=t1.user_id
	ORDER BY t1.id LIMIT #{limit,jdbcType=BIGINT};
  </select>
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from joke
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.eqshen.model.Joke" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into joke (title, status, type, 
      createdate, user_id, good, 
      bad, content)
    values (#{title,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}, #{type,jdbcType=VARCHAR}, 
      #{createdate,jdbcType=TIMESTAMP}, #{userId,jdbcType=BIGINT}, #{good,jdbcType=BIGINT}, 
      #{bad,jdbcType=BIGINT}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.eqshen.model.Joke" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into joke
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="title != null" >
        title,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="createdate != null" >
        createdate,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="good != null" >
        good,
      </if>
      <if test="bad != null" >
        bad,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="createdate != null" >
        #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="good != null" >
        #{good,jdbcType=BIGINT},
      </if>
      <if test="bad != null" >
        #{bad,jdbcType=BIGINT},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.eqshen.model.Joke" >
    update joke
    <set >
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="createdate != null" >
        createdate = #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="good != null" >
        good = #{good,jdbcType=BIGINT},
      </if>
      <if test="bad != null" >
        bad = #{bad,jdbcType=BIGINT},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.eqshen.model.Joke" >
    update joke
    set title = #{title,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      type = #{type,jdbcType=VARCHAR},
      createdate = #{createdate,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=BIGINT},
      good = #{good,jdbcType=BIGINT},
      bad = #{bad,jdbcType=BIGINT},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.eqshen.model.Joke" >
    update joke
    set title = #{title,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      type = #{type,jdbcType=VARCHAR},
      createdate = #{createdate,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=BIGINT},
      good = #{good,jdbcType=BIGINT},
      bad = #{bad,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  
</mapper>